{
  "version": 3,
  "sources": ["../../utils/mqFunctions.ts"],
  "sourcesContent": ["import amqplib from 'amqplib';\nimport './env';\n\nexport const sendMessageToDb = async (message: object) => {\n  const q = 'pizza-orders';\n  const conn = await amqplib.connect(process.env.RABBITMQ_URI);\n  const ch = await conn.createChannel();\n  await ch.assertQueue(q);\n  const qm = JSON.stringify(message);\n  return ch.sendToQueue(q, Buffer.from(qm, \"utf-8\"));\n}\n\n\nexport const receiveMessageFromDb = async (app) => {\n  const q = \"pizza-status\";\n  const conn = await amqplib.connect(process.env.RABBITMQ_URI);\n  const ch = await conn.createChannel();\n  await ch.assertQueue(q);\n  await ch.consume(q, async (msg: Message) => {\n    console.log('Received order from MQ: ', msg.content.toString());\n    const orderData = JSON.parse(msg.content.toString())\n    await app.client.chat.postMessage({\n      channel: orderData.user.id,\n      text: `<@${orderData.user.id}> \u0441\u0442\u0430\u0442\u0443\u0441 \u0432\u0430\u0448\u0435\u0433\u043E \u0437\u0430\u043A\u0430\u0437\u0430 \u0438\u0437\u043C\u0435\u043D\u0438\u043B\u0441\u044F \u043D\u0430 \"${orderData.status.text}\"`\n    });\n  }, { noAck: true });\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAoB;AACpB,iBAAO;AAEA,MAAM,kBAAkB,OAAO,YAAoB;AACxD,QAAM,IAAI;AACV,QAAM,OAAO,MAAM,eAAAA,QAAQ,QAAQ,QAAQ,IAAI,YAAY;AAC3D,QAAM,KAAK,MAAM,KAAK,cAAc;AACpC,QAAM,GAAG,YAAY,CAAC;AACtB,QAAM,KAAK,KAAK,UAAU,OAAO;AACjC,SAAO,GAAG,YAAY,GAAG,OAAO,KAAK,IAAI,OAAO,CAAC;AACnD;AAGO,MAAM,uBAAuB,OAAO,QAAQ;AACjD,QAAM,IAAI;AACV,QAAM,OAAO,MAAM,eAAAA,QAAQ,QAAQ,QAAQ,IAAI,YAAY;AAC3D,QAAM,KAAK,MAAM,KAAK,cAAc;AACpC,QAAM,GAAG,YAAY,CAAC;AACtB,QAAM,GAAG,QAAQ,GAAG,OAAO,QAAiB;AAC1C,YAAQ,IAAI,4BAA4B,IAAI,QAAQ,SAAS,CAAC;AAC9D,UAAM,YAAY,KAAK,MAAM,IAAI,QAAQ,SAAS,CAAC;AACnD,UAAM,IAAI,OAAO,KAAK,YAAY;AAAA,MAChC,SAAS,UAAU,KAAK;AAAA,MACxB,MAAM,KAAK,UAAU,KAAK,2LAA0C,UAAU,OAAO;AAAA,IACvF,CAAC;AAAA,EACH,GAAG,EAAE,OAAO,KAAK,CAAC;AACpB;",
  "names": ["amqplib"]
}
